import { BlogPost } from '../types';
import { authors } from '../authors';

export const arquitecturaMultiTenant: BlogPost = {
  id: 'arquitectura-multi-tenant-dia-1',
  title: 'Arquitectura Multi-tenant desde el D√≠a 1',
  excerpt: 'Nuestras decisiones de dise√±o iniciales para soportar m√∫ltiples clientes de forma segura y escalable, usando PostgreSQL y Supabase.',
  content: `
## Por Qu√© Multi-tenant desde el Inicio

Una de las decisiones m√°s importantes que tomamos fue dise√±ar InfraUX como una aplicaci√≥n multi-tenant desde el primer d√≠a. Esta decisi√≥n, aunque agreg√≥ complejidad inicial, ha sido fundamental para nuestro crecimiento y escalabilidad.

### ¬øQu√© es Multi-tenancy?

Multi-tenancy es un patr√≥n de arquitectura donde una √∫nica instancia de la aplicaci√≥n sirve a m√∫ltiples clientes (tenants), manteniendo sus datos completamente aislados y seguros. En nuestro caso, cada "company" en InfraUX es un tenant independiente.

### El Gran Debate: MongoDB vs PostgreSQL

Inicialmente, consideramos MongoDB por su flexibilidad con esquemas din√°micos. Los diagramas de infraestructura pueden ser muy variados, y la naturaleza schema-less de MongoDB parec√≠a ideal. Sin embargo, despu√©s de semanas de an√°lisis, PostgreSQL emergi√≥ como el ganador.

#### Por qu√© elegimos PostgreSQL:

| Caracter√≠stica | PostgreSQL | MongoDB |
|----------------|------------|---------|
| **Row Level Security** | ‚úÖ Nativo | ‚ùå Manual |
| **JSONB** | ‚úÖ Flexibilidad + Estructura | ‚úÖ Solo flexibilidad |
| **Transacciones ACID** | ‚úÖ Completas | ‚ö†Ô∏è Limitadas |
| **Integraci√≥n Supabase** | ‚úÖ Perfecta | ‚ùå No disponible |
| **Madurez** | ‚úÖ 30+ a√±os | ‚úÖ 10+ a√±os |

### Implementaci√≥n de Row Level Security

RLS es la piedra angular de nuestra arquitectura multi-tenant. Cada tabla tiene pol√≠ticas que garantizan que los usuarios solo pueden acceder a datos de su company:

\`\`\`sql
-- Pol√≠tica para la tabla diagrams
CREATE POLICY "Users can only see their company diagrams" ON diagrams
  FOR SELECT
  USING (company_id = auth.jwt() ->> 'company_id');

-- Pol√≠tica para INSERT
CREATE POLICY "Users can only create diagrams in their company" ON diagrams
  FOR INSERT
  WITH CHECK (company_id = auth.jwt() ->> 'company_id');

-- Pol√≠tica para UPDATE
CREATE POLICY "Users can only update their company diagrams" ON diagrams
  FOR UPDATE
  USING (company_id = auth.jwt() ->> 'company_id')
  WITH CHECK (company_id = auth.jwt() ->> 'company_id');
\`\`\`

### Estructura de Datos Multi-tenant

Nuestra estructura de base de datos sigue un patr√≥n consistente:

\`\`\`sql
-- Tabla companies (root del tenant)
CREATE TABLE companies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  settings JSONB DEFAULT '{}'::jsonb
);

-- Tabla users con relaci√≥n a company
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES companies(id) ON DELETE CASCADE,
  email TEXT UNIQUE NOT NULL,
  role TEXT NOT NULL CHECK (role IN ('owner', 'admin', 'member', 'viewer')),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Tabla diagrams con company_id
CREATE TABLE diagrams (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES companies(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  content JSONB NOT NULL, -- Aqu√≠ almacenamos el diagrama completo
  environment TEXT NOT NULL,
  created_by UUID REFERENCES users(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- √çndices para performance
CREATE INDEX idx_diagrams_company_id ON diagrams(company_id);
CREATE INDEX idx_diagrams_environment ON diagrams(company_id, environment);
CREATE INDEX idx_diagrams_content_gin ON diagrams USING gin(content);
\`\`\`

### Gesti√≥n de Sesiones y Context

Cada request incluye el company_id en el JWT token, lo que permite a PostgreSQL aplicar autom√°ticamente las pol√≠ticas RLS:

\`\`\`typescript
// middleware/auth.ts
export async function withAuth(req: Request) {
  const token = req.headers.get('Authorization')?.replace('Bearer ', '');
  
  if (!token) {
    throw new Error('No authentication token');
  }
  
  const { data: { user }, error } = await supabase.auth.getUser(token);
  
  if (error || !user) {
    throw new Error('Invalid token');
  }
  
  // El company_id est√° en los metadatos del usuario
  const companyId = user.user_metadata.company_id;
  
  // Supabase autom√°ticamente incluye esto en el JWT
  return { user, companyId };
}
\`\`\`

### Beneficios de Nuestra Arquitectura

<div class="success-box">
‚úÖ **Seguridad por Dise√±o:** Con RLS, es imposible acceder accidentalmente a datos de otro tenant. Incluso si hay un bug en el c√≥digo de la aplicaci√≥n, PostgreSQL bloquear√° el acceso.
</div>

<div class="info-box">
üí° **Escalabilidad Horizontal:** Podemos escalar agregando m√°s servidores de aplicaci√≥n sin preocuparnos por la segregaci√≥n de datos.
</div>

<div class="warning-box">
‚ö†Ô∏è **Backup y Restore Granular:** Podemos hacer backup o restaurar datos de un tenant espec√≠fico sin afectar a otros.
</div>

### Desaf√≠os y Soluciones

#### Desaf√≠o 1: Migraciones de Schema

Las migraciones deben ser cuidadosamente dise√±adas para no romper el aislamiento de datos.

**Soluci√≥n:** Todas las migraciones pasan por un proceso de revisi√≥n estricto y se prueban en un ambiente multi-tenant de staging.

#### Desaf√≠o 2: Performance con Muchos Tenants

A medida que crecemos, las queries pueden volverse lentas si no est√°n bien optimizadas.

**Soluci√≥n:** √çndices estrat√©gicos en company_id y particionamiento de tablas grandes por tenant.

#### Desaf√≠o 3: L√≠mites y Quotas por Tenant

Diferentes planes necesitan diferentes l√≠mites de recursos.

**Soluci√≥n:** Sistema de quotas flexible almacenado en la tabla companies:

\`\`\`json
{
  "quotas": {
    "max_diagrams": 10,
    "max_users": 5,
    "max_environments": 3,
    "features": {
      "collaboration": true,
      "api_access": false,
      "custom_domains": false
    }
  }
}
\`\`\`

### Lecciones Aprendidas

1. **Invertir en arquitectura temprano paga dividendos:** La complejidad inicial se ha traducido en facilidad de mantenimiento
2. **RLS es poderoso pero requiere disciplina:** Cada tabla nueva necesita pol√≠ticas bien pensadas
3. **Testing multi-tenant es cr√≠tico:** Tenemos tests espec√≠ficos que verifican el aislamiento de datos
4. **Monitoreo por tenant es esencial:** Necesitas saber qu√© tenant est√° causando problemas

### El Futuro: Sharding y M√°s All√°

Aunque nuestra arquitectura actual puede manejar miles de tenants, ya estamos planeando el siguiente nivel:

- **Sharding por tenant:** Los tenants grandes podr√°n tener su propia base de datos
- **Multi-regi√≥n:** Tenants podr√°n elegir d√≥nde almacenar sus datos
- **Bring Your Own Database:** Empresas podr√°n usar su propia instancia de PostgreSQL

La decisi√≥n de ir multi-tenant desde el d√≠a 1 ha sido fundamental para nuestro √©xito. Aunque agreg√≥ complejidad inicial, nos ha permitido crecer de manera segura y escalable, manteniendo los datos de nuestros clientes completamente aislados y protegidos.

### M√©tricas de Performance

| M√©trica | Valor | Objetivo |
|---------|-------|----------|
| **Queries/segundo** | 12,000 | 10,000 |
| **Latencia p50** | 23ms | < 50ms |
| **Latencia p99** | 87ms | < 200ms |
| **Aislamiento de datos** | 100% | 100% |
| **Uptime** | 99.97% | 99.9% |
`,
  date: '2024-11-14',
  week: 2,
  month: 'Noviembre',
  year: 2024,
  category: 'T√©cnico',
  author: authors.ana,
  tags: ['arquitectura', 'multitenant', 'postgresql', 'supabase'],
  readTime: '8 min',
  featured: false,
};